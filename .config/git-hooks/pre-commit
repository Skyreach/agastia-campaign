#!/bin/bash
# Pre-Commit Hook - Format Validation and Notion Sync
#
# This hook enforces:
# 1. File naming conventions (blocks duplicate patterns)
# 2. Format compliance (validates entity format)
# 3. Notion sync (syncs modified files before commit)

set -e

REPO_ROOT="$(git rev-parse --show-toplevel)"
CONFIG_DIR="$REPO_ROOT/.config"

# Color codes for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}============================================================${NC}"
echo -e "${BLUE}üîç PRE-COMMIT VALIDATION${NC}"
echo -e "${BLUE}============================================================${NC}"
echo

# Check 1: File Naming Validation (Data Parity Protocol)
echo -e "${BLUE}1Ô∏è‚É£  Checking file naming conventions...${NC}"

# Banned patterns that indicate duplicates
BANNED_PATTERNS="_UPDATED|_FINAL|_v2|_v3|_NEW|_CONSOLIDATED|_MERGED|_OLD|_BACKUP"

# Get staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

NAMING_VIOLATIONS=0
for file in $STAGED_FILES; do
    # Check only markdown files
    if [[ $file =~ \.md$ ]]; then
        # Check for banned patterns
        if echo "$file" | grep -E "($BANNED_PATTERNS)" > /dev/null; then
            echo -e "${RED}   ‚ùå NAMING VIOLATION: $file${NC}"
            echo -e "${YELLOW}      Contains banned pattern. See .config/DATA_PARITY_PROTOCOL.md${NC}"
            NAMING_VIOLATIONS=$((NAMING_VIOLATIONS + 1))
        fi
    fi
done

if [ $NAMING_VIOLATIONS -gt 0 ]; then
    echo -e "${RED}‚ùå COMMIT BLOCKED: $NAMING_VIOLATIONS naming violations found${NC}"
    echo -e "${YELLOW}Edit existing files in place instead of creating duplicates.${NC}"
    exit 1
fi

echo -e "${GREEN}   ‚úÖ File naming compliant${NC}"
echo

# Check 2: Format Validation
echo -e "${BLUE}2Ô∏è‚É£  Validating format compliance...${NC}"

FORMAT_VIOLATIONS=0
for file in $STAGED_FILES; do
    # Check entity files
    if [[ $file =~ ^(Player_Characters|NPCs|Factions|Locations|Quests|Items|Campaign_Core)/.*\.md$ ]]; then
        # Determine entity type from path
        ENTITY_TYPE=""
        if [[ $file =~ ^Player_Characters/ ]]; then
            ENTITY_TYPE="PC"
        elif [[ $file =~ ^NPCs/ ]]; then
            ENTITY_TYPE="NPC"
        elif [[ $file =~ ^Factions/ ]]; then
            ENTITY_TYPE="Faction"
        elif [[ $file =~ ^Locations/ ]]; then
            ENTITY_TYPE="Location"
        elif [[ $file =~ ^Quests/ ]]; then
            ENTITY_TYPE="Quest"
        elif [[ $file =~ ^Items/ ]]; then
            ENTITY_TYPE="Item"
        fi

        if [ -n "$ENTITY_TYPE" ]; then
            # Run format compliance check
            if ! python3 "$CONFIG_DIR/format_compliance_check.py" "$file" 2>&1 | grep -q "COMPLIANT"; then
                echo -e "${YELLOW}   ‚ö†Ô∏è  FORMAT WARNING: $file${NC}"
                echo -e "${YELLOW}      Run: python3 .config/format_compliance_check.py $file${NC}"
                FORMAT_VIOLATIONS=$((FORMAT_VIOLATIONS + 1))
            fi
        fi
    fi
done

if [ $FORMAT_VIOLATIONS -gt 0 ]; then
    echo -e "${YELLOW}   ‚ö†Ô∏è  $FORMAT_VIOLATIONS format warnings (non-blocking)${NC}"
    echo -e "${YELLOW}   Consider fixing with: python3 .config/auto_fix_format.py <file>${NC}"
else
    echo -e "${GREEN}   ‚úÖ Format validation passed${NC}"
fi
echo

# Check 3: Notion Sync
echo -e "${BLUE}3Ô∏è‚É£  Syncing to Notion...${NC}"

# Check if Python and dependencies are available
if ! python3 -c "import notion_client, frontmatter" 2>/dev/null; then
    echo -e "${YELLOW}   ‚ö†Ô∏è  Python dependencies not installed${NC}"
    echo -e "${YELLOW}   Skipping sync (file watcher will handle it)${NC}"
    echo
    echo -e "${GREEN}============================================================${NC}"
    echo -e "${GREEN}‚úÖ PRE-COMMIT PASSED (sync deferred to file watcher)${NC}"
    echo -e "${GREEN}============================================================${NC}"
    exit 0
fi

SYNC_ERRORS=0
for file in $STAGED_FILES; do
    # Sync campaign markdown files
    if [[ $file =~ ^(Player_Characters|NPCs|Factions|Locations|Quests|Items|Sessions|Campaign_Core)/.*\.md$ ]]; then
        # Determine entity type
        ENTITY_TYPE=""
        if [[ $file =~ ^Player_Characters/ ]]; then
            ENTITY_TYPE="pc"
        elif [[ $file =~ ^NPCs/ ]]; then
            ENTITY_TYPE="npc"
        elif [[ $file =~ ^Factions/ ]]; then
            ENTITY_TYPE="faction"
        elif [[ $file =~ ^Locations/ ]]; then
            ENTITY_TYPE="location"
        elif [[ $file =~ ^Quests/ ]]; then
            ENTITY_TYPE="quest"
        elif [[ $file =~ ^Items/ ]]; then
            ENTITY_TYPE="item"
        elif [[ $file =~ ^Sessions/ ]]; then
            ENTITY_TYPE="session"
        elif [[ $file =~ ^Campaign_Core/ ]]; then
            ENTITY_TYPE="artifact"
        fi

        if [ -n "$ENTITY_TYPE" ]; then
            echo -e "${BLUE}   Syncing: $file (type: $ENTITY_TYPE)${NC}"
            if python3 "$REPO_ROOT/sync_notion.py" "$file" "$ENTITY_TYPE" 2>&1 | grep -q "Created:\|Updated:"; then
                echo -e "${GREEN}   ‚úÖ Synced${NC}"
            else
                echo -e "${YELLOW}   ‚ö†Ô∏è  Sync failed (non-blocking)${NC}"
                SYNC_ERRORS=$((SYNC_ERRORS + 1))
            fi
        fi
    fi
done

if [ $SYNC_ERRORS -gt 0 ]; then
    echo -e "${YELLOW}   ‚ö†Ô∏è  $SYNC_ERRORS sync warnings (non-blocking)${NC}"
    echo -e "${YELLOW}   File watcher will retry sync${NC}"
fi

echo
echo -e "${GREEN}============================================================${NC}"
echo -e "${GREEN}‚úÖ PRE-COMMIT PASSED${NC}"
echo -e "${GREEN}============================================================${NC}"

exit 0
